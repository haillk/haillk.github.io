<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haillk-Blog</title>
    <link>https://haillk.github.io/</link>
    <description>Recent content on Haillk-Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Apr 2020 14:58:14 +0800</lastBuildDate>
    
	<atom:link href="https://haillk.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go_Channel详解</title>
      <link>https://haillk.github.io/post/Go-Notes/Go_Channel%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Apr 2020 14:58:14 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go_Channel%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;*每天都有新体验&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go运行时调度</title>
      <link>https://haillk.github.io/post/Go-Notes/Go%E8%BF%90%E8%A1%8C%E6%97%B6%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 31 Mar 2020 15:39:51 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go%E8%BF%90%E8%A1%8C%E6%97%B6%E8%B0%83%E5%BA%A6/</guid>
      <description>&lt;p&gt;*每天都有新体验&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>页表存在哪里</title>
      <link>https://haillk.github.io/post/linux/%E9%A1%B5%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%93%AA%E9%87%8C/</link>
      <pubDate>Mon, 30 Mar 2020 15:32:14 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/linux/%E9%A1%B5%E8%A1%A8%E5%AD%98%E5%9C%A8%E5%93%AA%E9%87%8C/</guid>
      <description>&lt;p&gt;*每天都有新体验&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>装饰这模式</title>
      <link>https://haillk.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%BF%99%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 30 Mar 2020 14:47:03 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%BF%99%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;*每天都有新体验&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AttentionGAN</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/AttentionGAN/</link>
      <pubDate>Sun, 29 Mar 2020 00:18:57 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/AttentionGAN/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>SPA GAN网络架构</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SPA-GAN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 23 Mar 2020 19:39:57 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SPA-GAN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/</guid>
      <description>论文内容：</description>
    </item>
    
    <item>
      <title>SAGAN生成器和判别器</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SAGAN%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E5%88%A4%E5%88%AB%E5%99%A8/</link>
      <pubDate>Mon, 23 Mar 2020 15:30:18 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SAGAN%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E5%88%A4%E5%88%AB%E5%99%A8/</guid>
      <description>SAGAN ​ 生成器： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #将一些层封装成块，，注意这里有SN的参与 def block(input,output_channel,training=false): x = BatchNormalization(input) x = RELU() convtr = conv2dT(output_channels,3,2,padding=&amp;#39;same&amp;#39;) x = SN(convtr) x = BatchNormalization()&amp;lt;------------------------------------------- x = RELU() convtr = conv2dT(output_channels,3,2,padding=&amp;#39;same&amp;#39;)</description>
    </item>
    
    <item>
      <title>SA_NET</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SA_NET/</link>
      <pubDate>Sun, 22 Mar 2020 18:14:38 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/SA_NET/</guid>
      <description>论文内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 使用self-attention的SANET实现风格迁移 基本概念： ​ 内容图像lc,</description>
    </item>
    
    <item>
      <title>卷积conv2d</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AFconv2d/</link>
      <pubDate>Fri, 20 Mar 2020 23:18:48 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AFconv2d/</guid>
      <description>Conv2d conv2d参考,看这个足够了 参考原文 函数定义： 1 2 keras.layers.Conv2D(filters, kernel_size, strides=(1, 1), padding=&amp;#39;valid&amp;#39;, data_format=None, dilation_rate=(1, 1), activation=None, use_bias=True, kernel_initializer=&amp;#39;glorot_uniform&amp;#39;, bias_initializer=&amp;#39;zeros&amp;#39;, kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None) 该层创建一个卷积核，对层输入惊醒卷积以生成张量。如果user_bias为</description>
    </item>
    
    <item>
      <title>Init_call</title>
      <link>https://haillk.github.io/post/Python/init_call/</link>
      <pubDate>Fri, 20 Mar 2020 22:44:20 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/init_call/</guid>
      <description>_init_()和_call_() _init_()相当于类的构造器 _call_()： ​ Python中的函数是一级对象，也就是说函数的引用可以作为输入传递到其他函</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://haillk.github.io/post/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 19 Mar 2020 16:18:09 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看文件大小 stat命令 1 2 3 4 5 6 7 8 9 10 (base) root@debian:~/tf_down# stat download File: download Size: 9087 Blocks: 24 IO Block: 4096 regular file Device: fe01h/65025d Inode: 410261 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2020-03-19 16:14:06.998596373 +0800 Modify: 2020-03-19 16:14:07.102598211 +0800 Change: 2020-03-19 16:14:07.102598211 +0800 Birth: - wc命令 1 2 3 (base) root@debian:~/tf_down# wc -c download 9087</description>
    </item>
    
    <item>
      <title>Tfrecord</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tfrecord/</link>
      <pubDate>Mon, 16 Mar 2020 22:59:58 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tfrecord/</guid>
      <description>TFrecord文件定义： 这是一种将图像数据和标签放在一起的二进制文件，能更好的利用内存，在tensorflow中快速的复制，移动，读取，存储 等等.. 本质上和x</description>
    </item>
    
    <item>
      <title>Tf2_用tfdata加载数据</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tf2_%E7%94%A8tfdata%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 16 Mar 2020 17:02:36 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/tf2_%E7%94%A8tfdata%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;使用tf.data进行图像预处理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DCGAN_tf2</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/DCGAN_tf2/</link>
      <pubDate>Sun, 15 Mar 2020 15:30:34 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/DCGAN_tf2/</guid>
      <description>跟着tf官网过一遍DCGAN的算法流程，源地址 导入包 1 from __future__ import absolute_import, division, print_function, unicode_literals absolute_import模块：一般情况下，程序默认是先在系统的默认目录中寻找导入的包，</description>
    </item>
    
    <item>
      <title>Tls证书</title>
      <link>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/tls%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Fri, 13 Mar 2020 01:19:56 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/tls%E8%AF%81%E4%B9%A6/</guid>
      <description>基本概念 ​ 参考HTTPS精读TLS证书校验 ​ https比http多了一层安全层（Security Layer）&amp;ndash;TLS/SSl SSL是最早的安全层协议</description>
    </item>
    
    <item>
      <title>后台运行程序</title>
      <link>https://haillk.github.io/post/linux/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 11 Mar 2020 13:35:30 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/linux/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/</guid>
      <description>nohup后台运行程序，后台运行，进程查看，和终止 参考 1、不挂断的执行命令 2、&amp;amp; 后台运行 1 2 3 4 5 6 7 nohup command &amp;amp; #查看运行的后台程序,只能查看当前终端 jobs -l #</description>
    </item>
    
    <item>
      <title>Go调用shell命令</title>
      <link>https://haillk.github.io/post/Go-Notes/go%E8%B0%83%E7%94%A8shell%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 11 Mar 2020 13:23:50 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/go%E8%B0%83%E7%94%A8shell%E5%91%BD%E4%BB%A4/</guid>
      <description>执行shell命令，并获取返回值 1 2 3 4 5 6 7 8 func execshell(){ cmd := exec.Command(&amp;#34;v2ray&amp;#34;,&amp;#34;url&amp;#34;,&amp;#34;**&amp;#34;) //参数要分开 //将返回值输出到缓存 var out bytes.Buffer cmd.Stdout = &amp;amp;out //执行命令 err:=cmd.Run() } 参考go调用shell命令</description>
    </item>
    
    <item>
      <title>With As</title>
      <link>https://haillk.github.io/post/Python/with-as/</link>
      <pubDate>Tue, 10 Mar 2020 00:09:42 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/with-as/</guid>
      <description>with语句，对于实现需要设置，事后做清理工作，with语句就能很好的处理： 在不用with语句： 1 2 3 4 5 file = open(&amp;#34;/temp&amp;#34;) try: data = file.read() finally: file.close() 使用with语句： 1 2 with open(&amp;#34;/tmp/fs&amp;#34;) as file: data = file.read()</description>
    </item>
    
    <item>
      <title>普归一化</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%99%AE%E5%BD%92%E4%B8%80%E5%8C%96/</link>
      <pubDate>Sat, 07 Mar 2020 03:14:05 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%99%AE%E5%BD%92%E4%B8%80%E5%8C%96/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Curl命令</title>
      <link>https://haillk.github.io/post/linux/curl%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 01 Mar 2020 13:36:22 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/linux/curl%E5%91%BD%E4%BB%A4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GAN发展时间轴</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GAN%E5%8F%91%E5%B1%95%E6%97%B6%E9%97%B4%E8%BD%B4/</link>
      <pubDate>Sat, 29 Feb 2020 17:10:06 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GAN%E5%8F%91%E5%B1%95%E6%97%B6%E9%97%B4%E8%BD%B4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>命令行flag包</title>
      <link>https://haillk.github.io/post/Go-Notes/%E5%91%BD%E4%BB%A4%E8%A1%8Cflag%E5%8C%85/</link>
      <pubDate>Wed, 19 Feb 2020 22:35:53 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/%E5%91%BD%E4%BB%A4%E8%A1%8Cflag%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title>双冒号和zip函数</title>
      <link>https://haillk.github.io/post/Python/%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8Czip%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 17 Feb 2020 20:05:10 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E5%8F%8C%E5%86%92%E5%8F%B7%E5%92%8Czip%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>线性代数基本概念</title>
      <link>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 15 Feb 2020 20:22:12 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Leetcode 最不常用单词</title>
      <link>https://haillk.github.io/post/Python/leetcode-%E6%9C%80%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D/</link>
      <pubDate>Sat, 15 Feb 2020 19:11:16 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/leetcode-%E6%9C%80%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8D%95%E8%AF%8D/</guid>
      <description>&lt;p&gt;python可以获取列表中单词出现的次数。&lt;code&gt;words.count(word)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据结构和算法</title>
      <link>https://haillk.github.io/post/Python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 13 Feb 2020 12:38:33 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sync.Map的相关方法</title>
      <link>https://haillk.github.io/post/Go-Notes/sync/map/</link>
      <pubDate>Tue, 11 Feb 2020 20:18:46 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/sync/map/</guid>
      <description></description>
    </item>
    
    <item>
      <title>复制变量恢复至锁状态</title>
      <link>https://haillk.github.io/post/Go-Notes/%E5%A4%8D%E5%88%B6%E5%8F%98%E9%87%8F%E6%81%A2%E5%A4%8D%E8%87%B3%E9%94%81%E7%8A%B6%E6%80%81/</link>
      <pubDate>Sun, 02 Feb 2020 21:36:42 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/%E5%A4%8D%E5%88%B6%E5%8F%98%E9%87%8F%E6%81%A2%E5%A4%8D%E8%87%B3%E9%94%81%E7%8A%B6%E6%80%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>新年开始浪</title>
      <link>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/%E6%96%B0%E5%B9%B4%E5%BC%80%E5%A7%8B%E6%B5%AA/</link>
      <pubDate>Sun, 02 Feb 2020 15:28:12 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/%E6%96%B0%E5%B9%B4%E5%BC%80%E5%A7%8B%E6%B5%AA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2020新年快乐</title>
      <link>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/2020%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</link>
      <pubDate>Tue, 31 Dec 2019 23:48:20 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/2020%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>百度云不限速第三方实测5M速20191231</title>
      <link>https://haillk.github.io/post/Windows/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8D%E9%99%90%E9%80%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AE%9E%E6%B5%8B5M%E9%80%9F20191231/</link>
      <pubDate>Tue, 31 Dec 2019 20:45:42 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8D%E9%99%90%E9%80%9F%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AE%9E%E6%B5%8B5M%E9%80%9F20191231/</guid>
      <description>&lt;p&gt;亿寻&amp;mdash;百度云不限速第三方软件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Taskkill关闭进程</title>
      <link>https://haillk.github.io/post/Windows/taskkill%E5%85%B3%E9%97%AD%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sat, 28 Dec 2019 01:01:55 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/taskkill%E5%85%B3%E9%97%AD%E8%BF%9B%E7%A8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Yield完全解读</title>
      <link>https://haillk.github.io/post/Python/yield%E5%AE%8C%E5%85%A8%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Fri, 27 Dec 2019 02:15:34 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/yield%E5%AE%8C%E5%85%A8%E8%A7%A3%E8%AF%BB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python3里gbk的encode错误</title>
      <link>https://haillk.github.io/post/Python/python3%E9%87%8Cgbk%E7%9A%84encode%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 27 Dec 2019 01:32:19 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/python3%E9%87%8Cgbk%E7%9A%84encode%E9%94%99%E8%AF%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SyncMutex互斥锁</title>
      <link>https://haillk.github.io/post/Go-Notes/syncMutex%E4%BA%92%E6%96%A5%E9%94%81/</link>
      <pubDate>Fri, 27 Dec 2019 00:28:48 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/syncMutex%E4%BA%92%E6%96%A5%E9%94%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>编译exe生成图标</title>
      <link>https://haillk.github.io/post/Windows/%E7%BC%96%E8%AF%91exe%E7%94%9F%E6%88%90%E5%9B%BE%E6%A0%87/</link>
      <pubDate>Thu, 26 Dec 2019 01:22:25 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/%E7%BC%96%E8%AF%91exe%E7%94%9F%E6%88%90%E5%9B%BE%E6%A0%87/</guid>
      <description>&lt;p&gt;使用MinGW生成带有定制图标的exe&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用requests</title>
      <link>https://haillk.github.io/post/Python/%E4%BD%BF%E7%94%A8requests.get%E6%97%B6%E6%8F%90%E7%A4%BAssl%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 25 Dec 2019 17:46:22 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E4%BD%BF%E7%94%A8requests.get%E6%97%B6%E6%8F%90%E7%A4%BAssl%E9%94%99%E8%AF%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Map不是引用而是指针</title>
      <link>https://haillk.github.io/post/Go-Notes/map%E4%B8%8D%E6%98%AF%E5%BC%95%E7%94%A8%E8%80%8C%E6%98%AF/</link>
      <pubDate>Wed, 25 Dec 2019 16:40:51 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/map%E4%B8%8D%E6%98%AF%E5%BC%95%E7%94%A8%E8%80%8C%E6%98%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Select作用</title>
      <link>https://haillk.github.io/post/Go-Notes/select%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 24 Dec 2019 17:26:06 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/select%E4%BD%9C%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>右键菜单优化powershell和cmd目录结构</title>
      <link>https://haillk.github.io/post/Windows/%E5%8F%B3%E9%94%AE%E4%BC%98%E5%8C%96powershell%E5%92%8Ccmd%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 21 Dec 2019 23:35:47 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/%E5%8F%B3%E9%94%AE%E4%BC%98%E5%8C%96powershell%E5%92%8Ccmd%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;实现在空白处直接右键打开powshell和cmd &amp;mdash;&amp;mdash;&amp;mdash;-和shift+右键打开管理员权限&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git常用命令</title>
      <link>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 21 Dec 2019 19:17:53 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go Notes 5</title>
      <link>https://haillk.github.io/post/Go-Notes/Go-notes-5/</link>
      <pubDate>Sat, 21 Dec 2019 17:37:28 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go-notes-5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>什么是闭包</title>
      <link>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 20 Dec 2019 21:47:00 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;p&gt;轮子哥的话**：闭包不是私有啊，闭的意思不是“封闭内部状态”，而是“封闭外部状态”啊。一个函数如何能封闭外部状态呢，当外部状态的scope失效的时候，还有一份留在内部状态里面……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装更新pip</title>
      <link>https://haillk.github.io/post/Python/%E5%AE%89%E8%A3%85%E6%9B%B4%E6%96%B0pip/</link>
      <pubDate>Fri, 20 Dec 2019 19:38:40 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E5%AE%89%E8%A3%85%E6%9B%B4%E6%96%B0pip/</guid>
      <description></description>
    </item>
    
    <item>
      <title>跟着无闻学Go Web应用开发 高级模板</title>
      <link>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E9%AB%98%E7%BA%A7%E6%A8%A1%E6%9D%BF-/</link>
      <pubDate>Fri, 20 Dec 2019 16:55:01 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E9%AB%98%E7%BA%A7%E6%A8%A1%E6%9D%BF-/</guid>
      <description>&lt;p&gt;上一节学习了模板引擎的逻辑控制和空白符号处理用法。这一节学习一下，高级概念和用法，并将讯安然结果转换为html。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跟着无闻学Go Web应用开发 进阶模板</title>
      <link>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E8%BF%9B%E9%98%B6%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Thu, 19 Dec 2019 16:55:01 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E8%BF%9B%E9%98%B6%E6%A8%A1%E6%9D%BF/</guid>
      <description>&lt;p&gt;在Go 语言提供的模板引擎中进行条件判断和更加复杂的逻辑操作&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>跟着无闻学Go Web应用开发 简单模板</title>
      <link>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E7%AE%80%E5%8D%95%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Wed, 18 Dec 2019 23:23:20 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E7%AE%80%E5%8D%95%E6%A8%A1%E6%9D%BF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>跟着无闻学Go Web应用开发-初窥http服务器</title>
      <link>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E5%88%9D%E7%AA%A5http%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 18 Dec 2019 21:45:23 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/unkown-web/%E8%B7%9F%E7%9D%80%E6%97%A0%E9%97%BB%E5%AD%A6Go-web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E5%88%9D%E7%AA%A5http%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用nssm创建自定义服务</title>
      <link>https://haillk.github.io/post/Windows/%E4%BD%BF%E7%94%A8nssm%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 17 Dec 2019 18:58:41 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/%E4%BD%BF%E7%94%A8nssm%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Selenium安装使用</title>
      <link>https://haillk.github.io/post/Python/selenium%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 15 Dec 2019 00:49:02 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/selenium%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
      <description>selenium能真是的模拟打开一个浏览器，模拟鼠标事件，提供选择器，控制cookie等等。 安装 由于使用了conda,安装就很方便了。 conda install selenium 安装chrome驱动</description>
    </item>
    
    <item>
      <title>Scrapy常用命令</title>
      <link>https://haillk.github.io/post/Python/scrapy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 14 Dec 2019 22:21:47 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/scrapy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>新建一个工程 scrapy startproject spider_name 构建爬虫 scrapy genspider name domain 运行爬虫 scrapy runspider 爬虫名称 启动项目 scrapy crawl xxx</description>
    </item>
    
    <item>
      <title>Anaconda常用命令</title>
      <link>https://haillk.github.io/post/Python/anaconda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 14 Dec 2019 22:02:22 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/anaconda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看虚拟环境 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ##创建虚拟环境 conda create -n env-name python=X.X ##切换虚拟环境 conda activate env-name ##关闭虚拟环境 deactivate ##删除虚拟环境 conda remove -n env-name --all ##查看存在的虚拟环境 conda env list</description>
    </item>
    
    <item>
      <title>Win10隐藏资源管理器中的额外文件夹</title>
      <link>https://haillk.github.io/post/Windows/win10%E9%9A%90%E8%97%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A2%9D%E5%A4%96%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 13 Dec 2019 23:57:23 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/win10%E9%9A%90%E8%97%8F%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A2%9D%E5%A4%96%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>打开注册表编辑器 方法：【win+R】打开运行框，输入“regedit”进入 目标文件夹 该路径下由很多文件夹，找到相应的文件夹。 HKEY_LOCAL_MACHINE</description>
    </item>
    
    <item>
      <title>Powershell美化</title>
      <link>https://haillk.github.io/post/Windows/powershell%E7%BE%8E%E5%8C%96/</link>
      <pubDate>Thu, 12 Dec 2019 21:28:50 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/powershell%E7%BE%8E%E5%8C%96/</guid>
      <description>oh-my-posh使用和主题选择 oh-my-posh 是一个开源、低调的 PowerShell 主题框架。 下载安装 在powershell中执行 1 2 3 4 Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser Import-Module posh-git Import-Module oh-my-posh 选择主题 oh-my-pos</description>
    </item>
    
    <item>
      <title>黑纱字体</title>
      <link>https://haillk.github.io/post/Windows/%E9%BB%91%E7%BA%B1%E5%AD%97%E4%BD%93/</link>
      <pubDate>Tue, 10 Dec 2019 22:53:59 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Windows/%E9%BB%91%E7%BA%B1%E5%AD%97%E4%BD%93/</guid>
      <description>黑纱字体下载链接</description>
    </item>
    
    <item>
      <title>Windows通过pip安装scrapy</title>
      <link>https://haillk.github.io/post/Python/windows%E5%AE%89%E8%A3%85scrapy/</link>
      <pubDate>Tue, 10 Dec 2019 18:29:22 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/windows%E5%AE%89%E8%A3%85scrapy/</guid>
      <description>Windows通过pip安装scrapy Scrapy需要超多的依赖，而pip instarll scrapy并不会下载好全部依赖。我在安装twisted时出现问题。 1 error: Microsoft Visual C++ 14.0 is</description>
    </item>
    
    <item>
      <title>apt-get update和upgrade和dist-upgrade的区别</title>
      <link>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/apt-getupdategrade/</link>
      <pubDate>Sat, 07 Dec 2019 22:37:54 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/apt-getupdategrade/</guid>
      <description>1 2 3 4 5 6 7 8 update update is used to resynchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list. For example, when using a Debian archive, this command retrieves and scans the Packages.gz files, so that information about new and updated packages is available. An update should always be performed before an upgrade or dist-upgrade. Please be aware that the overall progress meter will be</description>
    </item>
    
    <item>
      <title>Debian安装python38</title>
      <link>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/debian%E5%AE%89%E8%A3%85python38/</link>
      <pubDate>Sat, 07 Dec 2019 22:19:52 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/%E9%9A%8F%E7%AC%94/debian%E5%AE%89%E8%A3%85python38/</guid>
      <description>源码安装 1、安装依赖包 1 sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus build-essential libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libffi-dev 2、下载python3.8源码 1 2 3 4 5 6 7 ##更新 sudo apt-get update ##下载 wget https://www.python.org/downloads/release/python-380/ ##解压 tar -xvf Python-3.8.0.tar.xz cd Python-3.8.0/ 3、配置，编</description>
    </item>
    
    <item>
      <title>流畅的python学习笔记 2</title>
      <link>https://haillk.github.io/post/Python/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</link>
      <pubDate>Sat, 07 Dec 2019 00:40:52 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</guid>
      <description>1、列表推导 列表循环：dummy = [ord(symbol) for symbol in symbols] 传统for循环： 1 2 for symbol in symbols: ... codes.append(ord(symbol)) 带条件的列表推导：beyond_ascii = [ord(s) for s in symbols if ord(s) &amp;gt; 127] 笛卡尔积：tshirt</description>
    </item>
    
    <item>
      <title>Go Notes 4</title>
      <link>https://haillk.github.io/post/Go-Notes/Go-notes-4/</link>
      <pubDate>Fri, 06 Dec 2019 23:25:31 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go-notes-4/</guid>
      <description>recover的扑捉，defer函数的接受者和参数 1、recover必须隔一个函数帧栈才能捕获到 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //错误 func</description>
    </item>
    
    <item>
      <title>流畅的python学习笔记 1</title>
      <link>https://haillk.github.io/post/Python/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</link>
      <pubDate>Fri, 06 Dec 2019 01:43:47 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Python/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</guid>
      <description>特殊方法的格式 特殊方法的名字以两个下划线开头,两个下划线结尾(例如_getitem_)。比如 obj[key] 的背后就是 getitem 方法， 为了能求得 my_collection[key] 的值， 解释器实际上会调用 my_col</description>
    </item>
    
    <item>
      <title>Go Notes 3</title>
      <link>https://haillk.github.io/post/Go-Notes/Go-notes-3/</link>
      <pubDate>Sat, 30 Nov 2019 03:32:08 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go-notes-3/</guid>
      <description>&lt;p&gt;nil channel和已经关闭的channel,常量寻址，断言，cap,不能使用短变量声明设置结构体字段值，slice&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Notes 2</title>
      <link>https://haillk.github.io/post/Go-Notes/Go-notes-2/</link>
      <pubDate>Fri, 29 Nov 2019 01:39:30 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go-notes-2/</guid>
      <description>&lt;p&gt;map中value是否可寻址的问题，数组的比较和切片的比较，存在全局变量和局部变量时，调用方法会读取全局变量，for range的次数和副本问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go Notes 1</title>
      <link>https://haillk.github.io/post/Go-Notes/Go-notes-1/</link>
      <pubDate>Fri, 29 Nov 2019 00:16:19 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Go-Notes/Go-notes-1/</guid>
      <description>&lt;p&gt;多重赋值，短变量声明，interface{}和interface{}指针，Slice 扩容，基于类型创建的方法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ginv1.4(一)</title>
      <link>https://haillk.github.io/post/Ginv1.4/Ginv1.4%E4%B8%80/</link>
      <pubDate>Fri, 29 Nov 2019 00:16:08 +0800</pubDate>
      
      <guid>https://haillk.github.io/post/Ginv1.4/Ginv1.4%E4%B8%80/</guid>
      <description>&lt;p&gt;基础形式 ，参数获取&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://haillk.github.io/about/</link>
      <pubDate>Thu, 10 Oct 2019 00:09:42 +0800</pubDate>
      
      <guid>https://haillk.github.io/about/</guid>
      <description>so far , so good ! 个人邮箱：haillk@sina.cn</description>
    </item>
    
    <item>
      <title>常用工具</title>
      <link>https://haillk.github.io/tools/</link>
      <pubDate>Thu, 10 Oct 2019 00:09:42 +0800</pubDate>
      
      <guid>https://haillk.github.io/tools/</guid>
      <description>常用工具链接 聚合图床 CClose前置窗口工具 美杜莎vps管理站点 美杜莎推荐链接 TwistedW&#39;s Home机器学习的博客 中国数据 paperswithcode iconfont巴里巴巴适量图标库 图片压缩</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://haillk.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://haillk.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://haillk.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://haillk.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>